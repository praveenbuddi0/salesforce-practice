
import { LightningElement, track } from 'lwc';

export default class RegistrationForm extends LightningElement {
   // RegistrationForm.js
   @track username = '';
   @track password = '';
   @track passwordError = '';
   @track isRegisterButtonDisabled = true;

   handleUsernameChange(event) {
      this.username = event.target.value;
   }

   handlePasswordChange(event) {
      this.password = event.target.value;
      this.validatePassword();
   }

   validatePassword() {
      const lowercaseRegex = /[a-z]/;
      const uppercaseRegex = /[A-Z]/;
      const numberRegex = /[0-9]/;

      if (
         this.password.length >= 8 &&
         lowercaseRegex.test(this.password) &&
         uppercaseRegex.test(this.password) &&
         numberRegex.test(this.password)
      ) {
         this.passwordError = '';
         this.isRegisterButtonDisabled = false;
      } else {
         this.passwordError =
            'Password must contain at least 8 characters, including one lowercase letter<br/>, one uppercase letter, and one number.';
         this.isRegisterButtonDisabled = true;
      }
   }

   get registerButtonClass() {
      return this.isRegisterButtonDisabled ? 'disabled' : '';
   }

   registerUser() {
      // Implement your user registration logic here
      // You can use this.username and this.password to get the user input
      // For example, you can make an Apex callout to handle the registration on the server side
      console.log('User registered:', this.username);
   }
}

<!-- RegistrationForm.html -->
<template>
   <div class="container">
      <h2>Registration Form</h2>
      <div class="form-field">
         <label for="username">Username:</label>
         <input type="text" id="username" oninput={handleUsernameChange} />
      </div>
      <div class="form-field">
         <label for="password">Password:</label>
         <input type="password" id="password" oninput={handlePasswordChange} />
         <div class="error">{passwordError}</div>
      </div>
      <button class={registerButtonClass} onclick={registerUser} disabled={isRegisterButtonDisabled}>
         Register
      </button>
   </div>
</template>


/* RegistrationForm.css */
.container {
   font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
   text-align: center;
   margin: 20px;
   border: 1px solid #070202;
   padding: 45px;
   border-radius: 10px;
   box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
   max-width: 400px;
   margin: auto;
}

h2 {
   color: #333;
}

.form-field {
   margin-bottom: 20px;
   text-align: left;
}

label {
   display: block;
   font-size: 14px;
   margin-bottom: 8px;
}

input {
   width: 100%;
   padding: 10px;
   border: 1px solid #ddd;
   border-radius: 4px;
}

.error {
   color: #ff0033;
   font-size: 12px;
   margin-top: 5px;
}

button {
   padding: 10px;
   background-color: #4caf50;
   color: white;
   border: none;
   border-radius: 4px;
   cursor: pointer;
   font-size: 16px;
}

button:disabled {
   background-color: #ddd;
   cursor: not-allowed;
}

button:hover {
   background-color: #45a049;
}